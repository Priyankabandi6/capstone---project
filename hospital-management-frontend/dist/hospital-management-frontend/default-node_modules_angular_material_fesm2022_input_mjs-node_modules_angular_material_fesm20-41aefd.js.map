{"version":3,"file":"default-node_modules_angular_material_fesm2022_input_mjs-node_modules_angular_material_fesm20-41aefd.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/text-field.mjs","./node_modules/@angular/material/fesm2022/input.mjs","./node_modules/@angular/material/fesm2022/select.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, booleanAttribute, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Platform }, { type: i0.NgZone }] });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkAutofill, isStandalone: true, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: AutofillMonitor }], propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkTextareaAutosize, isStandalone: true, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\", booleanAttribute], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: [{ alias: 'cdkTextareaAutosize', transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }] } });\n\nclass TextFieldModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: TextFieldModule, imports: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: TextFieldModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { _ErrorStateTracker, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\nclass MatInput {\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /** An object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    /** Whether the input is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    constructor(_elementRef, _platform, ngControl, parentForm, parentFormGroup, defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form field for determining whether the placeholder has been promoted.\n    _formField) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n            // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n            // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n            // disabled.\n            if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n                this.disabled = this.ngControl.disabled;\n                this.stateChanges.next();\n            }\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Refreshes the error state of the input. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        const placeholder = this._getPlaceholder();\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Gets the current placeholder of the form field. */\n    _getPlaceholder() {\n        return this.placeholder || null;\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatInput, isStandalone: true, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-form-field-textarea-control\": \"_isInFormField && _isTextarea\", \"class.mat-mdc-form-field-input-control\": \"_isInFormField\", \"class.mdc-text-field__input\": \"_isInFormField\", \"class.mat-mdc-native-select-inline\": \"_isInlineSelect()\", \"id\": \"id\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\", \"attr.id\": \"id\" }, classAttribute: \"mat-mdc-input-element\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        'class': 'mat-mdc-input-element',\n                        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n                        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n                        // this MDC equivalent input.\n                        '[class.mat-input-server]': '_isServer',\n                        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n                        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n                        '[class.mdc-text-field__input]': '_isInFormField',\n                        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[id]': 'id',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [MAT_INPUT_VALUE_ACCESSOR]\n                }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }], propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\nclass MatInputModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatInput], exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatFormFieldModule, MatInput],\n                    exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n","import { Overlay, CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { NgClass, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Self, Attribute, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, _ErrorStateTracker, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, filter, map, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nclass MatSelect {\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = value;\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = value;\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /** Whether the select is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    constructor(_viewportRuler, _changeDetectorRef, \n    /**\n     * @deprecated Unused param, will be removed.\n     * @breaking-change 19.0.0\n     */\n    _unusedNgZone, defaultErrorStateMatcher, _elementRef, _dir, parentForm, parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Disable the automatic labeling to avoid issues like #27241.\n         * @docs-private\n         */\n        this.disableAutomaticLabeling = true;\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        /** Whether the select is disabled. */\n        this.disabled = false;\n        /** Whether ripples in the select are disabled. */\n        this.disableRipple = false;\n        /** Tab index of the select. */\n        this.tabIndex = 0;\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n        this._multiple = false;\n        /** Whether to center the active option over the trigger. */\n        this.disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /**\n         * Width of the panel. If set to `auto`, the panel will match the trigger width.\n         * If set to null or an empty string, the panel will grow to match the longest option's text.\n         */\n        this.panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n            ? this._defaultOptions.panelWidth\n            : 'auto';\n        this._initialized = new Subject();\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._initialized.pipe(switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n        // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n        // recommendation.\n        //\n        // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n        // makes a few exceptions for compound widgets.\n        //\n        // From [Developing a Keyboard Interface](\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n        //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n        //   Listbox...\"\n        //\n        // The user can focus disabled options using the keyboard, but the user cannot click disabled\n        // options.\n        this._skipPredicate = (option) => {\n            if (this.panelOpen) {\n                // Support keyboard focusing disabled options in an ARIA listbox.\n                return false;\n            }\n            // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n            // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n            // closed.\n            return option.disabled;\n        };\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this.typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by the input, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (!this._canOpen()) {\n            return;\n        }\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        this._applyModalPanelOwnership();\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n            // Required for the MDC form field to pick up when the overlay has been closed.\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Refreshes the error state of the select. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelect, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: MatSelect, isStandalone: true, selector: \"mat-select\", inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute], placeholder: \"placeholder\", required: [\"required\", \"required\", booleanAttribute], multiple: [\"multiple\", \"multiple\", booleanAttribute], disableOptionCentering: [\"disableOptionCentering\", \"disableOptionCentering\", booleanAttribute], compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: [\"typeaheadDebounceInterval\", \"typeaheadDebounceInterval\", numberAttribute], sortComparator: \"sortComparator\", id: \"id\", panelWidth: \"panelWidth\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], exportAs: [\"matSelect\"], usesOnChanges: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform)}\"], dependencies: [{ kind: \"directive\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], standalone: true, imports: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform)}\"] }]\n        }], ctorParameters: () => [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], multiple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableOptionCentering: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatSelectTrigger, isStandalone: true, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                    standalone: true,\n                }]\n        }] });\n\nclass MatSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, imports: [CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            MatSelect,\n            MatSelectTrigger], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, matSelectAnimations };\n"],"names":["i1","normalizePassiveListenerOptions","i0","Injectable","EventEmitter","Directive","Output","booleanAttribute","Optional","Inject","Input","NgModule","coerceElement","coerceNumberProperty","EMPTY","Subject","fromEvent","auditTime","takeUntil","DOCUMENT","listenerOptions","passive","AutofillMonitor","constructor","_platform","_ngZone","_monitoredElements","Map","monitor","elementOrRef","isBrowser","element","info","get","subject","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","ɵfac","AutofillMonitor_Factory","t","ɵɵinject","Platform","NgZone","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","ngOnInit","subscribe","emit","CdkAutofill_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","selectors","outputs","standalone","selector","CdkTextareaAutosize","minRows","_minRows","value","_setMinHeight","maxRows","_maxRows","_setMaxHeight","enabled","_enabled","resizeToFitContent","reset","placeholder","_textareaElement","_cachedPlaceholderHeight","undefined","setAttribute","removeAttribute","_cacheTextareaPlaceholderHeight","document","_destroyed","_previousMinRows","_isViewInited","_handleFocusEvent","_hasFocus","_document","nativeElement","minHeight","_cachedLineHeight","style","maxHeight","ngAfterViewInit","_initialHeight","height","window","_getWindow","pipe","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","_measureScrollHeight","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","scrollHeight","ngDoCheck","force","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","_getDocument","doc","defaultView","selectionStart","selectionEnd","isStopped","setSelectionRange","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","inputs","ɵɵInputFlags","None","HasDecoratorInputTransform","exportAs","features","ɵɵInputTransformsFeature","host","decorators","alias","transform","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","coerceBooleanProperty","getSupportedInputTypes","i4","InjectionToken","Self","i2","Validators","i3","_ErrorStateTracker","MatCommonModule","i5","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","MatError","MatFormField","MatHint","MatLabel","MatPrefix","MatSuffix","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInput","disabled","_disabled","focused","stateChanges","id","_id","_uid","required","_required","ngControl","control","hasValidator","_type","_validateType","_isTextarea","has","errorStateMatcher","_errorStateTracker","matcher","_inputValueAccessor","readonly","_readonly","errorState","parentForm","parentFormGroup","defaultErrorStateMatcher","inputValueAccessor","ngZone","_formField","controlType","autofilled","_neverEmptyInputTypes","filter","_iOSKeyupListener","el","nodeName","toLowerCase","_previousNativeValue","IOS","_isServer","_isNativeSelect","_isInFormField","multiple","ngOnChanges","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","newValue","_getPlaceholder","_previousPlaceholder","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","_isInlineSelect","size","MatInput_Factory","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","hostVars","MatInput_HostBindings","MatInput_focus_HostBindingHandler","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","ɵɵhostProperty","ɵɵattribute","name","ɵɵclassProp","userAriaDescribedBy","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","providers","MatInputModule","MatInputModule_Factory","Overlay","CdkOverlayOrigin","CdkConnectedOverlay","OverlayModule","NgClass","CommonModule","inject","numberAttribute","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","ContentChildren","ContentChild","ViewChild","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatOptgroup","i6","CdkScrollableModule","removeAriaReferencedId","addAriaReferencedId","ActiveDescendantKeyManager","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","defer","merge","startWith","switchMap","map","distinctUntilChanged","take","trigger","transition","query","animateChild","state","animate","_c0","_c1","_c2","_c3","MatSelect_Conditional_4_Template","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r1","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","MatSelect_Conditional_5_Conditional_1_Template","ɵɵprojection","MatSelect_Conditional_5_Conditional_2_Template","triggerValue","MatSelect_Conditional_5_Template","ɵɵtemplate","ɵɵconditional","customTrigger","MatSelect_ng_template_10_Template","_r3","ɵɵgetCurrentView","MatSelect_ng_template_10_Template_div_animation_transformPanel_done_0_listener","$event","ɵɵrestoreView","ɵɵresetView","_panelDoneAnimatingStream","toState","MatSelect_ng_template_10_Template_div_keydown_0_listener","_handleKeydown","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵproperty","panelClass","ariaLabel","_getPanelAriaLabelledby","matSelectAnimations","transformPanelWrap","optional","transformPanel","opacity","getMatSelectDynamicMultipleError","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY","overlay","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","deps","useFactory","MAT_SELECT_TRIGGER","MatSelectChange","source","MatSelect","_scrollOptionIntoView","index","option","toArray","panel","labelCount","optionGroups","_getHostElement","scrollTop","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","_focused","_panelOpen","hideSingleSelectionIndicator","_hideSingleSelectionIndicator","_syncParentProperties","_placeholder","_multiple","_selectionModel","compareWith","_compareWith","fn","_initializeSelection","_value","hasAssigned","_assignValue","_onChange","_viewportRuler","_changeDetectorRef","_unusedNgZone","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_positions","originX","originY","overlayX","overlayY","o1","o2","_triggerAriaLabelledBy","_destroy","disableAutomaticLabeling","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","disableRipple","disableOptionCentering","panelWidth","_initialized","optionSelectionChanges","changes","onSelectionChange","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","_trackedModal","_skipPredicate","panelOpen","valueAccessor","typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","_panelDoneAnimating","change","_overlayWidth","_getOverlayWidth","_preferredOverlayOrigin","detectChanges","ngAfterContentInit","_initKeyManager","changed","added","select","removed","deselect","_resetOptions","newAriaLabelledby","_getTriggerAriaLabelledby","_previousControl","withTypeAhead","destroy","_clearFromModal","toggle","close","open","_canOpen","getConnectedOverlayOrigin","_applyModalPanelOwnership","withHorizontalOrientation","_highlightCorrectOption","markForCheck","modal","closest","panelId","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","shiftKey","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","preferredOrigin","refToMeasure","elementRef","getBoundingClientRect","width","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","sort","a","b","sortComparator","fallbackValue","valueToEmit","firstEnabledOptionIndex","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","MatSelect_Factory","ViewportRuler","ChangeDetectorRef","Directionality","ɵɵinjectAttribute","LiveAnnouncer","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","viewQuery","MatSelect_Query","ɵɵviewQuery","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","MatSelect_blur_HostBindingHandler","toString","ɵɵStandaloneFeature","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","_r1","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","ɵɵnamespaceSVG","ɵɵelement","MatSelect_Template_ng_template_backdropClick_10_listener","MatSelect_Template_ng_template_attach_10_listener","MatSelect_Template_ng_template_detach_10_listener","fallbackOverlayOrigin_r4","ɵɵreference","dependencies","styles","encapsulation","data","animation","changeDetection","OnPush","animations","descendants","MatSelectTrigger","MatSelectTrigger_Factory","MatSelectModule","MatSelectModule_Factory"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2]}